---
title: "Getting Data Through APIs"
author: "David Gerard"
date: "`r Sys.Date()`"
output:  
  html_document:
    toc: true
    toc_depth: 4
urlcolor: "blue"
---


```{r setup, include=FALSE}
set.seed(1)
knitr::opts_chunk$set(echo       = TRUE, 
                      fig.height = 3, 
                      fig.width  = 6,
                      fig.align  = "center")
ggplot2::theme_set(ggplot2::theme_bw())
```

# Learning Objectives

- APIs and R.
- [Chapter 1, 2, and 3 from An Introduction to APIs](https://zapier.com/learn/apis/).
- [Chapter 40 from STAT 545](https://stat545.com/diy-web-data.html).
- [Getting Started with `{httr2}`](https://httr2.r-lib.org/articles/httr2.html)
- [Rectangling](https://tidyr.tidyverse.org/articles/rectangle.html)

# Data on the Web

- There are at least 4 ways people download data on the web:
  1. Click to download a csv/xls/txt file.
  2. Use a package that interacts with an API.
  3. Use an API directly.
  4. Scrape from directly from the HTML file.
    
- We know how to do 1.

- This lesson is about doing 2 and 3.

-   Let's load the tidyverse:
    
    ```{r, message = FALSE}
    library(tidyverse)
    ```

# R Package API Wrappers

- API: Application Programming Interface
  - A description of how you can request data
    from a particular software, and a description of what 
    type of response you get after the request.
  - Usually, the data you get back are [XML](https://en.wikipedia.org/wiki/XML) 
    or [JSON](https://en.wikipedia.org/wiki/JSON) files.
  - API's are an abstraction and can be implemented in many languages.
  - Think of it like a user interface for a computer program. You click a button and expect 
    the user interface to do something. An API let's a program click a metaphorical 
    "button" and expect to get something back.
  - There are lots of free and public APIs: <https://github.com/public-apis/public-apis>

- Many of the most popular databases/websites have an R package that 
  wraps the API through R functions. 
  - I.e.: You can use an R function to request data.
    
- If an R package exists for an API, you should use it.
    
- Examples:
  - tidycensus: U.S. Census data API. 
      
    <https://cran.r-project.org/package=tidycensus>
      
  - gh: GitHub API.
  
    <https://cran.r-project.org/package=gh>
      
  - wbstats: World Bank data.
  
    <https://cran.r-project.org/package=wbstats>

  - rebird: Ebird dataset for bird sitings.
  
    <https://cran.r-project.org/package=rebird>
      
  - geonames: Dataset containing unique names for geographic locations.
  
    <https://cran.r-project.org/package=geonames>
      
  - WikipediR: Wikipedia API:
  
    <https://cran.r-project.org/package=WikipediR>
        
- Each package will be entirely unique, and you have to read its documentation
  to know how to download data. So we won't cover any of them.
  
# Use API's directly with httr2

- The goal of this section is not to provide a comprehensive lesson on 
  HTTP and extracting data using API's. Rather, this is just to point you
  to some resources and give you some examples.
  
- Each API is different, and so you'll always have to figure out how to interact
  with a new API.

- API's always have documentation on what parameters you can send,
  how you can send them, and what data you would get back based on the 
  values of those parameters.
  
- E.g.: OMDB (an open-source version of IMDB) has a simple API <http://www.omdbapi.com/>

# Authentication

- Some API's are public and you just have at them (though, be congnizent that you are not making too many requests). 

- Others require authentication to access the API.

- There are three ways that apps authenticate, from easiest to hardest:
  - Using "basic" authentication
  - Using an API key, and
  - Using OAuth.

## Basic Authentication

-   "Basic" authentication, where you just provide a username and password. The basic syntax for this is:
  
    ```{r, eval = FALSE}
    req_auth_basic(req, username, password)
    ```

- You should already have a username and password set up. 

- I would suggest keeping your password secure using your .Renviron file or via `{keyring}` (see below).

## API keys

- An API key is a string that you add to your request.

- To obtain a free key from OMDB and access it in R:
  1. Sign up for a free key: <https://www.omdbapi.com/apikey.aspx>
  2. Open up your .Renviron file using the usethis package.
     ```{r, eval = FALSE}
     library(usethis)
     edit_r_environ()
     ```
  3. Add the key OMDB sent you by email to the .Renviron package. You can
     call it `OMDB_API_KEY`, for example. In which case you would write
     the following in .Renviron:
     
     ```
     OMDB_API_KEY = <your-private-key>
     ```

     Where "`<your-private-key>`" is the private key OMDB sent you by email.
  4. Restart R.
  5. You can now always access your private key by
     ```{r}
     movie_key <- Sys.getenv("OMDB_API_KEY")
     ```
  6. You typically put your API key as a query parameter via `req_url_query()` (see below)

- It is important to never save or display your private key in a file you could share. 
  You are responsible for all behavior associated with your key. That is
  why we saved it to our .Renviron and are only accessing it secretly through
  `Sys.getenv()`.
  
-   It is still not great that your key is in a plain text environment. You
  can add a layer of security by using the keyring package: <https://github.com/r-lib/keyring>
  
    ```{r, eval = FALSE}
    library(keyring)
    key_set("OMDB_API_KEY_SECURE") ## do this once to save the key
    movie_key_2 <- key_get("OMDB_API_KEY_SECURE") ## do this each time you need the key
    ```
    
    A person with access to your computer who knows R and the keyring package
    could still get to your key. But it is more secure than placing your
    key in a plain text file (which is what .Renviron is). There are
    more secure ways to access keys in R.
  
## OAuth: 

- See [OAuth](https://httr2.r-lib.org/articles/oauth.html) from `{httr2}` for details.

- OAuth ("Open Authorization") is an open standard for authorization that allows users to securely access resources without giving away their login credentials.

- The idea is that your software asks the user if it can use the user's authorization to access the API.
  - It does this each time it needs to access the API. 
  - This is commonly used in big API's, like that of Google, Twitter, or Facebook.

- As an example, we will consider the [GitHub API](http://developer.github.com/v3/oauth/).

1. "Register an application" with the API provider before you can access the API. 

   - You do this by creating a developer account on the API's website, then registering a new OAuth app.

   - You won't actually have an app, but API developers use this word for any means where you ask to use a user's authorization.

   - This typically involves providing a name and a callback URL (typically <http://localhost:1410>) for your "application". 

   - For GitHub:

     - Register at <https://github.com/settings/developers>

     - Use any URL (like <https://github.com/>) as your homepage URL

     - Use <http://localhost:1410> as the callback url.
    
2. The provider will then give you a `client_id` and a `client_secret` that you will need to use.

   - Neither of these need to be protected like a password since the user will provide their own password/username for authentication.

   - For GitHub:

     - You can find these here: <https://github.com/settings/developers>

     - Click on your OAuth app.
    
3. Obtain a "token URL", which is sometimes called an "access URL".
    
   - This can be found somewhere in the API docs, but you have to read them carefully.
    
   - For GitHub:
        
     - The access URL is <https://github.com/login/oauth/access_token>

4.  Use `oauth_client()` to create a client. You feed in the `client_id`, the `client_secret`, the `toeken_url`, and any name you choose into it.
    
    ```{r, eval = FALSE}
    client <- oauth_client(
      id = "client_id",
      secret = "client_secret",
      token_url = "token_url",
      name = "personal_app_name"
    )
    ```
    
    - For GitHub:
    
      ```{r, eval = FALSE}
      client <- oauth_client(
        id = "933ffc6f53e466c58aa1",
        secret = "aa02ef46f93aa51a360f23f30f7640b445118e7f",
        token_url = "https://github.com/login/oauth/access_token",
        name = "gitapp"
      )
      ```
    
5. You get an "authorization URL". 
   - This again can be found somewhere in the docs.
   - For GitHub:
     - The autorization URL is: <https://github.com/login/oauth/authorize>
      
       ```{r, eval = FALSE}
       auth_url <- "https://github.com/login/oauth/authorize"
       ```
      
6.  Feed the authorization URL and the client into `req_oauth_auth_code()` during a request.

    ```{r, eval = FALSE}
    request("https://api.github.com/user") |>
      req_oauth_auth_code(client = client, auth_url = auth_url) |>
      req_perform() ->
      gout
    gout
    ```
    
- There are sometimes other "flows" for OAuth that require different steps. See here for details: <https://httr2.r-lib.org/articles/oauth.html>
    
- When using OAuth in a package, folks often (i) "cache" the token securely (because the generated token should be kept private), and (ii) ask folks to generate their own app. 

- Caching is easy. Just set `cache_disk = TRUE` in `req_oauth_auth_code()`. 
  - Note that this creates some security risks since the token will be saved on the disk. 
  - So you should inform the user if you do this.
    
- When you ask folks to generate their own app, then you should have `client_id` and `client_secret` as arguments that the user can provide.
  
# httr2

- Most API's on the web use HTTP (Hyper-Text Transfer Protocol). It's a 
  language for querying and obtaining data.

-   We won't learn HTTP, but we will use R's interface for HTTP through the
  `{httr2}` package.
  
    ```{r}
    library(httr2)
    ```
    
- To request data from a API, you typically take these steps:
  - Create a request with a base URL via `request()`.
  - Modify this request by some or all of the following:
    - Modifying the endpoint URL with `req_url_path_append()`.
    - Adding Queries to the URL with `req_url_query()`.
    - Adding Headers to the request with `req_headers()`.
    - Adding OAuath via `req_oauth_auth_code()` 
    - Specify the HTTP method with `req_method()`
      - `GET` will fetch data.
          - This is the default, so typically you don't need to specify it explicitly.
      - `PUT` will add stuff to the target.
      - `DELETE` will delete stuff at the target.
      - etc...
  - You should eyeball the http request via `req_dry_run()` and check that it is correct.
  - Send the request with `req_perform()`.

- Some API's only modify the URL path, some only modify the query, some require headers. Let's go through each of these in turn.

## URL Path

- Every API has a base URL that you modify.

- Some API's only modify the URL *path* to obtain the endpoint.

- Consider the [Wizard World API](https://wizard-world-api.herokuapp.com/swagger/index.html)

-   The documentation says that the base URL is "https://wizard-world-api.herokuapp.com".
    ```{r}
    baseurl <- "https://wizard-world-api.herokuapp.com"
    ```
    
-   Let's start a request with this baseurl via `request()`.

    ```{r}
    wizreq <- request(baseurl)
    ```

-   The documentation just says that we modify this URL to obtain the different objects.      - E.g., to obtain a list of all elixirs that occur in Harry Potter, we just add "Elixirs" at the end. 
    - We can do this to our request with `req_url_path_append()`

    ```{r}
    wizreq <- req_url_path_append(wizreq, "Elixirs")
    wizreq
    ```

-   Let's look at the http request

    ```{r}
    req_dry_run(wizreq)
    ```

-   We then implement this request via `req_perform()`.

    ```{r}
    eout <- req_perform(wizreq)
    eout
    ```

-   We would then clean this output (see rectangling below). But as a preview, we would do
    ```{r}
    tibble(elixir = resp_body_json(resp = eout)) |>
      unnest_wider(col = elixir)
    ```

## Queries

- Some APIs require you to modify the URL via *queries*. Queries occur after a question mark and are of the form
  ```
  http://www.url.com/?query1=arg1&query2=ar2&query3=arg3
  ```

- The [OMDB API](https://www.omdbapi.com/) requires you to provide queries. The documentation says 

  > Send all data requests to: http://www.omdbapi.com/?apikey=[yourkey]&
  
  But that documentation already has a query as a part of it (apikey=[yourkey]).
    
- You add queries via `req_url_query()`.
  - You provide it with name/value paires.

- The documentation for OMDB has a table called "Parameters", where they list the possible queries.

- Let's fetch information on the film [The Lighthouse](https://en.wikipedia.org/wiki/The_Lighthouse_(2019_film)), obtaining a short plot in json format.

-   This is what the URL looks like without my API key:
    ```{r}
    movie_key <- Sys.getenv("OMDB_API_KEY")
    request("http://www.omdbapi.com/") |>
      req_url_query(t = "The Lighthouse",
                    plot = "short",
                    r = "json") ->
      movie_req
    movie_req
    ```

-   Let's add our API key and perform the request.
    ```{r}
    movie_req |>
      req_url_query(apikey = movie_key) |>
      req_perform() ->
      mout
    mout
    ```
  
-   Output is just a list:
    ```{r}
    resp_body_json(mout) |>
      str()
    ```

  
- In the API documentation:

  ![](./cartoons/OMDB_API_DOC.png)\ 
    
## Headers

- Headers supply additional options for the return type.

- Common headers are described by Wikipedia: <https://en.wikipedia.org/wiki/List_of_HTTP_header_fields>

- You supply headers to a request via `req_headers()`.

-   Consider the [icanhazdadjoke](https://icanhazdadjoke.com/api) API. One option is to include a header to specify plain text returns, rather than JSON returns.

    ```{r, eval = FALSE}
    request("https://icanhazdadjoke.com/") |>
      req_headers(Accept = "text/plain") |>
      req_perform() ->
      dadout
    dadout
    resp_body_string(dadout)
    ```
    
-   This is different than a JSON output
    ```{r, eval = FALSE}
    request("https://icanhazdadjoke.com/") |>
      req_perform() ->
      dadout2
    resp_body_string(dadout2)
    ```
    
## Output:

- Functions that work with the response are all of the form `resp_*()`.
    
- The *status code* describes whether your request was successful.
  - List of codes: <https://http.cat/>
  - Use `resp_status()` to get the code for our request:
    ```{r}
    resp_status(mout)
    ```
        
-   *Headers* provide infromation on the request. Use the `resp_headers()` function to see what headers we got in our request.
  
    ```{r, eval = FALSE}
    resp_headers(mout)
    ```
  
-   The *body* contains the data you are probably most interested in. Use
  the `resp_body_*()` functions to access the body:
  
    ```{r, eval = FALSE}
    resp_body_json(mout)
    ```
  
-   Background: The body typically comes in the form of either a JSON or XML data structure.
    - For JSON, you use `resp_body_json()`
    - For XML you use `resp_body_xml()`
    - You can see the unparsed output with `resp_body_string()`
  
    ```{r}
    resp_body_string(mout)
    ```
    
-   `resp_header("content-type")` will often tell you the type of body output.
    ```{r}
    resp_header(mout, "content-type")
    resp_header(eout, "content-type")
    ```

# Rectangling

- The format for the data you typically get from an API is a list of lists.

-   The `repurrrsive` package contains a few examples.

    ```{r}
    library(repurrrsive)
    ```

-   The dataset `gh_users` contains information from 6 users, obtained using GitHub's API: <https://developer.github.com/v3/users/#get-a-single-user>

    ```{r}
    data("gh_users")
    typeof(gh_users)
    length(gh_users)
    names(gh_users[[1]])
    ```

- There are a few functions from `tidyr` package that can be used to "unnest" a list into a data frame.

  - `unnest_wider()`: Each list element becomes its own column
  - `hoist()`: Similar as `unnest_wider()`, but you can choose what elements to extract to their own columns.
  - `unnest_longer()`: Each list element becomes its own row.

-   Because this is the tidyverse, your list needs to be a column in a data frame:

    ```{r}
    df <- tibble(users = gh_users)
    df
    ```

- In which case, you can consider the unnest functions via:

  - `unnest_wider()` preserves the rows, but changes the columns.
  - `unnest_longer()` preserves the columns, but changes the rows
    
-   Use `unnest_wider()` to make each of those list elements their own column.

    ```{r}
    unnest_wider(df, users)
    ```

-   Graphic:

    ```{r, echo=FALSE}
    knitr::include_graphics(path = "./cartoons/unnest_wider.png")
    ```
    
-   Use `hoist()` to only extract some elements of a list:

    ```{r}
    df2 <- hoist(df, users, 
                 login = "login",
                 followers = "followers")
    df2
    ```
    
-   Notice that the new data frame still has a list column, but each each list now only has 28 elements instead of 30. That's because `hoist()` has removed the `login` and `followers` elements from each list in the list column.

    ```{r}
    df2$users[[1]]["login"]
    df2$users[[1]]["followers"]
    ```

-   Graphic:

    ```{r, echo=FALSE}
    knitr::include_graphics(path = "./cartoons/hoist.png")
    ```

-   Let's look at the list `gh_repos`, which was also obtained using the GitHub API: <https://developer.github.com/v3/repos/#list-user-repositories>

    ```{r}
    data("gh_repos")
    typeof(gh_repos)
    length(gh_repos)
    df <- tibble(repo = gh_repos)
    df
    ```

-   This list is very complicated!

    ```{r, echo=FALSE, out.width="40%"}
    knitr::include_graphics(path = "./cartoons/github_repos.png")
    ```
    
-   Ideally, each repo would be its own row (since the repositories are the observational units). We can do this with `unnest_longer()`.

    ```{r}
    df2 <- unnest_longer(df, repo)
    df2
    ```

-   Graphic:

    ```{r, echo=FALSE, out.width="40%"}
    knitr::include_graphics(path = "./cartoons/unnest_longer.png")
    ```

-   We can then use `unnest_wider()` or `hoist()` on this new data frame to get a tidy dataset.

    ```{r}
    df3 <- unnest_wider(df2, repo)
    df3
    ```

-   Graphic:

    ```{r, echo=FALSE, out.width="20%"}
    knitr::include_graphics(path = "./cartoons/unnest_wider_2.png")
    ```

-   **Exercise**: Clean up the `sw_people` list from the `repurrrsive` package:

    ```{r}
    library(repurrrsive)
    data("sw_people")
    ```
    
    ```{r, echo = FALSE, eval = FALSE}
    tibble(people = sw_people) |>
      unnest_wider(people)
    ```
  
-   **Exercise**: Clean up the `got_chars` list from the `repurrrsive` package

    ```{r}
    library(repurrrsive)
    data("got_chars")
    ```
    
    ```{r, echo = FALSE, eval = FALSE}
    tibble(chars = got_chars) |>
      unnest_wider(chars)
    ```

# NASA Exercise

Consider the [NASA API](https://api.nasa.gov/)

1. Generate an API key and save it as `NASA_API_KEY` in your R environment file.

2.  Read about the APOD API and obtain all images from January of 2022.

    ```{r, echo = FALSE, eval = TRUE}
    nasa_key <- Sys.getenv("NASA_API_KEY")
    request("https://api.nasa.gov/planetary/apod") |>
      req_url_query(start_date = "2022-01-01",
                    end_date = "2022-01-31",
                    api_key = nasa_key) |>
      req_perform() ->
      nout
    ```
    
3.  Clean the output into a data frame, like this:

    ```{r, echo = FALSE, eval = TRUE}
    tibble(img = resp_body_json(nout)) |>
      unnest_wider(img)
    ```
