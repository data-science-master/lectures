---
title: "S3 Objects"
author: "David Gerard"
date: "`r Sys.Date()`"
output:  
  html_document:
    toc: true
    toc_depth: 4
    toc_float: false
    highlight: pygments
urlcolor: "blue"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo       = TRUE, 
                      fig.align  = "center",
                      fig.height = 3, fig.width = 4)
ggplot2::theme_set(ggplot2::theme_bw() + ggplot2::theme(strip.background = ggplot2::element_rect(fill = "white")))
```

# Learning Objectives

- Chapter 13 of [Advanced R](https://adv-r.hadley.nz/)
  - Most notes taken from Hadley's book. Thank you so much.

# Motivation

- S3 is the most commonly used object-oriented programming (OOP) system in R.

-   Most of the common data types you are used to are S3.

    ```{r}
    # Data frames are S3
    sloop::otype(mtcars)
    
    # tibbles are S3
    mt_tb <- tibble::as_tibble(mtcars)
    sloop::otype(mt_tb)
    
    # lm objects are S3
    lmout <- lm(mpg ~ wt, data = mtcars)
    sloop::otype(lmout) 
    
    # ggplot2 plots are S3
    pl <- ggplot2::ggplot(mtcars, ggplot2::aes(x = wt, y = mpg)) + 
      ggplot2::geom_point()
    sloop::otype(pl)
    
    # tidymodels use S3
    tdout <- 
      parsnip::linear_reg() |>
      parsnip::set_engine("lm") |>
      parsnip::fit(mpg ~ wt, data = mtcars)
    sloop::otype(tdout)
    
    # Factors are S3
    x <- factor(c(1, 2, 3))
    sloop::otype(x)
    
    # Dates are S3
    x <- lubridate::make_date(year = 1970, month = 1, day = 1)
    sloop::otype(x)
    ```

- If you are creating a package and you want OOP features, you should use S3 unless
  1. You work in a large team, or you need to contribute to [Bioconductor](https://www.bioconductor.org/) (use S4).
  2. Modify-by-reference is important (use R6).
    
- This is since most R programmers are used to S3 (intuitively) and are not used to S4 or R6.

# S3 Basics

- An S3 object is any variable with a `class` attribute. **This is the full definition**.

- S3 objects may or may not have more attributes.

-   E.g. the `factor` class always has the `levels` attribute.

    ```{r}
    x <- factor(c("A", "B", "B", "A", "C", "A"))
    attributes(x)
    ```

-   You can get the underlying base type by `unclass()`.

    ```{r}
    unclass(x)
    ```

-   Functions can be S3 objects as well as long as they have the `class` attribute.

    ```{r}
    sout <- stepfun(1:3, 0:3)
    sloop::otype(sout)
    class(sout)
    ```

- S3 objects behave differently when passed to a **generic** function, a special type of function meant to provide different implementations based on the S3 class of the object.

- Use `sloop::ftype()` to see if a function is generic. If it has the word "generic" is anywhere, it can be used as an S3 generic.

-   These are all S3 generics
    ```{r}
    sloop::ftype(print)
    sloop::ftype(summary)
    sloop::ftype(plot)
    ```

-   But these are not:
    ```{r}
    sloop::ftype(lm)
    sloop::ftype(stop)
    ```

-   Generic functions behave differently depending on the class of the object.

    ```{r}
    print(mt_tb)
    print(lmout)
    print(pl)
    ```
    
- This is *not* implemented by `if`-`else` statements. That would be inefficient because only the authors of `print()` (i.e. the R Core team) could add new functionality to new S3 objects. The idea of using generic functions allows us (new developers) to define new functionality to the same generics.

- The implementation of a generic for a specific class is called a **method**.

-   The act of choosing a method from a generic is called **method dispatch**. Use `sloop::s3_dispatch()` to see this process.

    ```{r}
    sloop::s3_dispatch(print(mt_tb))
    ```
    - The `*` means the method exists but is not used.
    - The `=>` means the method exists and is used.
    - So above, it found a method for `tbl_df` and used it. So it did not go on to look for other methods (`tbl`, `data.frame`, or the `default` method), even though those classes have methods.

-   Below there is no `aperm()` method for matrices, integers, or numerics, so it used the default one, which is for arrays.
    ```{r}    
    mat <- matrix(1:12, nrow = 4, ncol = 3)
    sloop::s3_dispatch(aperm(mat, c(2, 1)))
    ```

-   You can access specific methods by `generic.class()`. E.g.

    ```{r}
    stats:::print.lm(lmout)
    aperm.default(mat, c(2, 1))
    ```

- But these are often not exported and should generally **not** be accessed directly by the user, or other developers.

- Lots of methods have `.` in the middle. But not all functions with `.` are methods. E.g. `read.csv()` and `t.test()` are not methods of generic functions. `read.csv()` is just a function with a dot in the name, and `t.test()` is just a generic function with a dot in the name. These functions were created before S3, which is why they are named poorly.

-   You can confirm that a function with a `.` in it is a method also with `sloop::is_s3_method()`.

    ```{r}
    sloop::is_s3_method("read.csv")
    sloop::is_s3_method("t.test")
    sloop::is_s3_method("print.default")
    ```

- Because of the important role of `.`, you should never name variables or non method functions with a dot in them.

-   To find all of the methods of a generic, use `sloop::s3_methods_generic()`.

    ```{r}
    sloop::s3_methods_generic("print")
    ```
    
-   To find all methods for a class, use `sloop::s3_methods_class()`.
    ```{r}
    sloop::s3_methods_class("data.frame")
    ```

-   **Exercise**: Explain the difference between each of the dots in `as.data.frame.data.frame()`. How would you typically use this method? Include in your discussion calls from the functions in the `{sloop}` package.

    ```{r, eval = FALSE, echo = FALSE}
    sloop::ftype(as.data.frame.data.frame)
    sloop::ftype(as.data.frame.data.frame)
    ```
    ```{block, eval = FALSE, echo = FALSE}
    The `.` between each `data` and each `frame` is just indicating the `data.frame` class.
    
    So `as.data.frame()` is an S3 generic that converts an object to a `data.frame` and then the `as.data.frame.data.frame()` is the method for inputs of class `data.frame()`.
    
    You would typically use this method by calling `as.data.frame()` with a `data.frame()` input, e.g. `as.data.frame(mtcars)`.
    ```

    ```{r, echo = FALSE, eval = FALSE}
    sloop::s3_dispatch(as.data.frame(mtcars))
    ```

-   **Exercise**: `mean()` is an S3 generic. What classes have a method for `mean()`. What is the difference between them?

    ```{r, echo = FALSE, eval = FALSE}
    sloop::s3_methods_generic("mean")
    ```

    ```{block, eval = FALSE, echo = FALSE}
    `mean.default()` will work with numeric and logical vector. The different date versions of `mean()` will return a date.
    ```

-   **Exercise** (Advanced R): What class of object does the following code return? What base type is it built on? What attributes does it use?

    ```{r}
    set.seed(21)
    x <- ecdf(rpois(100, 10))
    x
    ```

    ```{r, eval = FALSE, echo = FALSE}
    sloop::otype(x)
    class(x)
    typeof(x)
    attributes(x)
    ```

    ```{block, eval = FALSE, echo = FALSE}
    It's an `ecdf` class S3 object with the function (aka "closure") base type. It has a class and a call attribute.
    ```

-   **Exercise**: (Advanced R): What class of object does the following code return? What base type is it built on? What attributes does it use?

    ```{r}
    x <- table(rpois(100, 5))
    x
    ```

    ```{r, eval = FALSE, echo = FALSE}
    sloop::otype(x)
    class(x)
    attributes(x)
    ```

# Classes

-   Again, an S3 object is *any* object with a class attribute, that you can create with:

    ```{r}
    # Create and assign class in one step
    x <- structure(list(), class = "my_class")
    
    # Create, then set class
    x <- list()
    class(x) <- "my_class"
    ```

-   You can get the class attribute by `class()` (as long as it is S3).

    ```{r}
    class(x)
    ```
    
-   Thus, it is a little safer to use `sloop::s3_class()`.

    ```{r}
    sloop::s3_class(x)
    ```

-   You can test that an object is a certain class by `inherits()`.

    ```{r}
    class(mtcars)
    inherits(mtcars, "data.frame")
    inherits(mtcars, "tibble")
    
    mt_tb <- tibble::as_tibble(mtcars)
    inherits(mt_tb, "tbl_df")
    inherits(mt_tb, "data.frame")
    ```

-   R has no checks that the structure of the class is as you intended. E.g., we can change the "data.frame" class to `"Date"` and bad things will happen (i.e. R will try to use the wrong generics on the data).
    ```{r, error = TRUE}
    class(mt_tb) <- "Date"
    mt_tb
    ```

# Generics

-   A generic function is just one that performs method dispatch. Method dispatch is implemented through `UseMethod()`, so it is really easy to create a new generic.

    ```{r}
    mygeneric <- function(x, ...) {
      UseMethod("mygeneric")
    }
    ```
    
- No arguments are passed to `UseMethod()` except the name of the generic.

- The `x` is a required argument that all methods must have. You can choose to have this be a different name, to have more required arguments, or to have no required arguments.

- The `...` allows methods of your generic to include other variables than just `x`.

-   This is literally what most generic function definitions look like.
    ```{r}
    mean
    print
    plot
    summary
    ```

- The key of a generic is its goals. Methods should generally align with the goals of the generic so that R users don't get unexpected results. E.g. when you type `plot()` you shouldn't output a mean (even though S3 makes this valid behavior).

- How `UseMethod()` works: If an object has a class vector of `c("cl1", "cl2")` then `UseMethod()` will first search for a method for `cl1`, if it does not exist it will use the method for `cl2`, and if that does not exist it will use the default method (there is usually one).

-   E.g. all tibbles have class
    ```{r}
    mt_tb <- tibble::as_tibble(mtcars)
    class(mt_tb)
    ```

-   So any generic called with a tibble will first search for a `tbl_df` method, then a `tbl` method, then a `data.frame` method, then a default method (which would be for a list if applicable since tibbles are built on lists).

    ```{r}
    sloop::s3_dispatch(print(mt_tb))
    sloop::s3_dispatch(str(mt_tb))
    sloop::s3_dispatch(summary(mt_tb))
    sloop::s3_dispatch(mean(mt_tb))
    ```

- The "default" class is not a real class, but is there so that there is always a fall back.

# Methods

- To create a method
  1. Create a function definition for `generic.method()`.
  2. Make sure you use the same arguments as the generic (but you can usually include more aguements if there is `...` in the generic).

-   E.g., let's create plot and print methods for the `factor2` class.

    ```{r}
    print.factor2 <- function(x) {
      print(attr(x, "levels")[x])
      return(invisible(x))
    }
    
    plot.factor2 <- function(x, y = NULL) {
      tabx <- table(attr(x, "levels")[x])
      barplot(table(attr(x, "levels")[x]))
      return(invisible(x))
    }
    ```

-   Now, we get better printing for `factor`'s    
    ```{r}
    x <- factor(c("A", "A", "B", "B", "A", "B"))
    class(x) <- "factor2"
    print(x)
    ```

-   Note: If you don't know, whenever you just run something and have it print to the console, that is R implicitly running `print()`. So this looks better too:
    ```{r}
    x
    ```
    
- Note: In a print method, you either call the `print()` method of another S3 object, or you call `cat()`, which does less under the hood than `print()`.

-   We can verify that method dispatch is working appropriately
    ```{r}
    sloop::s3_dispatch(print(x))
    ```

-   Plotting looks better too
    ```{r}
    plot(x)
    ```

- You should only build methods for classes you own, or generics you own. It is considered bad manners to define a method for a class you do not own unless you own the generics.

- E.g. if you define a new print method for `tbl_df`, then include that in your package, that would be impolite to the tidyverse folks.

-   A method should have the same arguments as the generic. You can have more arguments if the generic has `...` in it. E.g. if you create `plot()`, then you must include `x` and `y`, but may include anything else.

    ```{r}
    formals(plot)
    ```

-   **Exercise** (Advanced R): What generics does the `table` class have methods for?

    ```{r, eval = FALSE, echo = FALSE}
    sloop::s3_methods_class("table")
    ```

-   **Exercise**: Create a new generic called `pop` that will remove the last element and return the shortened object. Make a default method for any vector. Then make methods for the `matrix` class that will remove the last column or row, depending on the user choice of an argument called `by`.

    ```{r, echo=FALSE, eval=FALSE}
    pop <- function(x, ...) {
      UseMethod("pop")
    }
    
    pop.default <- function(x) {
      return(x[-length(x)])
    }
    
    pop.matrix <- function(x, by = c("row", "col")) {
      by <- match.arg(by)
      if (by == "row") {
        return(x[-nrow(x), , drop = FALSE])        
      } else {
        return(x[, -ncol(x), drop = FALSE])        
      }
    }
    
    x <- c(1, 2, 3)
    pop(x)
    x <- matrix(1:6, ncol = 2, nrow = 3)
    x
    pop(x, by = "row")
    pop(x, by = "col")
    ```

# The Design of an S3 Object

- There are three most common structures for an S3 object.

- In decreasing order of most common usage by you:

1.  A list-like object, where the list represents one thing (e.g. model output, function, dataset, etc...).

    - For example, the output of `lm()` is a list like object that represents one model fit.
    
    ```{r}
    lmout <- lm(mpg ~ wt, data = mtcars)
    sloop::otype(lmout)
    typeof(lmout)
    ```

    - I use this format all of the time for the outputs of my model fits.

2.  A vector with new functionality. E.g. `factor`s and `Date`s. You combine, print, mathematically operate with these vectors in different ways.

    ```{r}
    x <- factor(c("A", "A", "B", "A", "B"))
    sloop::otype(x)
    typeof(x)
    ```

3.  Lists of equal length length vectors. E.g. `data.frame`s and `POSIXlt` objects.

    - `POSIXlt` objects are lists of years, days, minutes, seconds, etc... with the `i`th element of each vector contributing to indicating the same moment in time.
    ```{r}
    x <- as.POSIXlt(ISOdatetime(2020, 1, 1, 0, 0, 1:3))
    x
    typeof(x)
    ```
    - `data.frame` objects are lists of vectors where each vector is a variable and the `i`th element of each vector represents the same observational unit.
    ```{r}
    typeof(mtcars)
    ```
    
# Inheritance

- **Inheritance** is shared behavior. You can make your new class inherit from another class so that if you did not create a method, then it will fall back on the parent method.

- We call the child class the **subclass** and the parent class the **superclass**.

- E.g. the `tbl_df` (sub)class inherits from the `data.frame` (super)class.

-   You can simply create a subclass by including a vector of in the `class` attribute.

    ```{r}
    mt_tb <- tibble::as_tibble(mtcars)
    class(mt_tb)
    ```

- You should make sure your subclass is of the same base type as the superclass you are inheriting from. E.g. make sure anything you build off of `data.frame`s also has a list base type.

- You should make sure that you have at least all of the same attributes as the superclass you are inheriting from. E.g. `data.frame`s can have `names` and `row.names`, and so any subclass should also have those attributes.

# Documenting S3

-   It is sometimes nice to have the same help file for the default method and the generic. You can do that via the `@describeIn` `{roxygen}` tag.

    ```{r, eval = FALSE}
    #' Generic Function for generic.
    #' 
    #' @param x An R object. 
    generic <- function(x, ...) {
      
    }
    
    #' @describeIn generic Default Method
    #' 
    #' @param y is some default option
    #' 
    generic.default <- function(x, y = NULL, ...) {
      
    }
    ```

- See an example usage of this for the `mean()` and `summary()` documentation.

-   **Exercise**: Document your `pop()` generic and the methods you made for `pop()`.

    ```{r, eval = FALSE, echo = FALSE}
    #' Generic to remove last observation
    #' 
    #' @param x An R object.
    #' 
    #' @return The same R object, but with one less observation in the rears.
    #' 
    #' @author David Gerard
    pop <- function(x, ...) {
      UseMethod("pop")
    }
    
    #' @describeIn generic Default Method
    pop.default <- function(x) {
      return(x[-length(x)])
    }
    
    #' Pop method for matrices
    #' 
    #' You can either remove the last row or the last column.
    #' 
    #' @param by Should we remove the last row or column?
    #' 
    #' @author David Gerard
    pop.matrix <- function(x, by = c("row", "col")) {
      by <- match.arg(by)
      if (by == "row") {
        return(x[-nrow(x), , drop = FALSE])        
      } else {
        return(x[, -ncol(x), drop = FALSE])        
      }
    }
    ```

# Method Dispatch Technicalities

- Every variable in R has some **implicit class** even if it does not have a `class` attribute.

- This **implicit class** is used to define methods for these objects, and to control method dispatch when you use a base type on a generic.

-   `sloop::s3_class()` will return the implicit or explicit class of all objects.
    ```{r}
    x <- c(1, 2, 3)
    sloop::otype(x) ## not an S3 object
    sloop::s3_class(x) ## implicit S3 class
    
    x <- matrix(1:6, nrow = 3, ncol = 2)
    sloop::otype(x) ## not an S3 object
    sloop::s3_class(x)
    ```

-   So to create new matrix methods, you can do

    ```{r, eval = FALSE}
    generic.matrix <- function(...) {
      
    }
    ```

    even though `matrix` is not an S3 class.
    
    
- The following functions are called "group generics" `+`, `-`, `*`, `/`, `^`, `%%`, `%/%`, `&`, `|`, `!`, `==`, `!=`, `<`, `<=`, `>=`, and `>`.

- You can define methods for these group generics, but undergo what's called double dispatch, choosing a method based on both arguments. This is what allows you to add integers and dates together. We will talk about how to do this correctly in the next lecture.

# New functions

- `class()`: Assign or get the class attribute.
- `unclass()`: Remove class attribute and obtain underlying base type.
- `inherits()`: Test if an object is an instance of a given class.
- `sloop::ftype()`: See if a function is a "regular/primitive/internal function, a internal/S3/S4 generic, or a S3/S4/RC method".
- `sloop::s3_dispatch()`: View method dispatch.
- `sloop::s3_methods_generic()`: View all methods of a generic function.
- `sloop::s3_methods_class()`: View all methods implemented for a specific class.
- `sloop::s3_class()`: Returns implicit and explicit class.
- `sloop::is_s3_method()`: Predicate function for determining if a function is an S3 method.
- `UseMethod()`: Used in a generic to define it as a generic.
- `NextMethod()`: Apply the next method, in the method dispatch chain, of the called generic.
